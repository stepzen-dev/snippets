# here we automatially generate the postbodyfrom the query parameters

type Root {
  args: JSON
  data: String
  files: JSON
  form: JSON
  headers: JSON
  json: JSON
  origin: String
  url: String
}

"""
Here, since we used application/x-www-form-urlencoded StepZen will
encode the postbody as form-encoded and the httpbin.org/post will return 
it in form.   You'll see that args, data, and json will all be empty.
query {restJSON(name: "Joe Smith" city:"New York")} { data args form json  }
"""
type Query {
    rest(name:String, city: String): Root
    # sometimes when you are testing, it is easier to set a query return type to be JSON
    # this avoids any type conflicts that you might have, so this is also acceptable
    # of course, you cannot subselect fields this way
    # rest(name:String, city: String): JSON
    @rest (endpoint: "https://httpbin.org/post",
            method: POST,
            headers: [{name: "Accept", value:"application/json"},
                    {name: "Content-Type", value: "application/x-www-form-urlencoded"}],
          
    )
}


"""
and as application/json, StepZen will automatically populate the body.  
Note: if method POST is used, The default for Content-Type is application/json

Here using the sample GraphQL query, data will show the contents of the postbody and json as transformed to JSON.
[Try it without the name or city.  Yes, it will do the appropriate thing.]
Sample GraphQL Query:
query {restJSON(name: "Joe Smith" city:"New York")} { data args form json url }
"""

type Query {
    restjsonbody(name:String, city: String): Root
    # sometimes when you are testing, it is easier to set a query return type to be JSON
    # this avoids any type conflicts that you might have, so this is also acceptable
    # of course, you cannot subselect fields this way
    # rest(name:String, city: String): JSON
    @rest (endpoint: "https://httpbin.org/post",
            method: POST,
            headers: [{name: "Accept", value:"application/json"}]
    )
}