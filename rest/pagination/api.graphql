# This example shows how @rest is configured for pagination.
#
# @rest supports three REST API styles of pagination and
# the directive maps REST responses to a consistent standard
# GraphQL pagination approach, specifically
# GraphQL Cursor Connections Specification
# https://relay.dev/graphql/connections.htm
#
# PAGE_NUMBER - pages by requesting a specific page number
# OFFSET - pages by reqesting a starting record offset
# NEXT_CURSOR - pages by opaque cursors returned by the REST API
#

"""
Sample customer type.
"""
type Customer {
  id: ID!
  name: String
  email: String
}

"""
`CustomerConnection` is the connection type for `Customer` pagination.
In StepZen, a field returning a connection type must have arguments
`first` (number of nodes to fetch) and `after` (opaque cursor indicating
the starting point).
"""
type CustomerConnection {
  edges: [CustomerEdge]
  pageInfo: PageInfo!
}

"""
`CustomerEdge` provides access to the node and its cursor.
"""
type CustomerEdge {
  node: Customer
  cursor: String
}

type Query {
  """
  `customersPageNumber` pages through twenty three generated `Customer` objects.
  The data is supplied by a simulated REST API using page number pagination
  but is exposed using standard GraphQL pagination.

  Typically the `endpoint` argument of `@rest` would have query
  parameters that set the pagination arguments expected by the
  REST API from the field arguments `first` and `after` (page number),
  for example: `?limt=$first&page=$after`.
  """
  customersPageNumber(first: Int!, after: String = ""): CustomerConnection
    @rest(
      # pagination sets the type of pagination the REST API uses
      # and for PAGE_NUMBER requires a setter that declares
      # where the total number of pages is in the JSON response.
      pagination: {
        type: PAGE_NUMBER
        setters: { field: "total", path: "meta.totalPages" }
      }

      # resultroot indicates where root in the JSON response
      # for the values that will populate the nodes.
      # Note this does not affect pagination setters, they
      # are always relative to the root of the response.
      resultroot: "values[]"

      # Ecmascript (with empty endpoint) is used to mimic the response from a REST api.
      # Note ECMAScript is only used to generate a mock response with customer objects and page number metadata,
      # using @rest against a real endpoint would not typically require any ECMAScript.
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
        // A total of 23 items will be returned
        const totalItems = 23;

        // Pagination field arguments
        // Since this is PAGE_NUMBER pagination
        // "after" is decoded by StepZen from the opaque string value
        // and passed into @rest as a integer page number value,
        // with the first page being 1.
        const first = get('first');
        const pageNumber = get('after');

        // metadata - total number of pages
        const totalPages = Math.ceil(totalItems / first)

        // generate customers for nodes
        const startOffset = ((pageNumber - 1) * first) + 1;
        const endOffset = startOffset + first;
        var customers = []
        for (let i = startOffset; i < endOffset && i <= totalItems; i++) {
            customers.push({
              id: i,
              name: 'name-' + i,
              email: 'user-' + i + '@example.com'
            });
        }

        // This returns a typical layout of a REST response
        // when pagination is through a page number.
        // @rest must be configured to match the REST response layout.
        //
        // pagination setters defines that the total page count
        // is taken from meta.totalPages
        //
        // resultroot corresponds to the location that contains the
        // data values. Note the REST API returns the customer objects,
        // StepZen automatically creates the connection/edges structure
        // for the values.
        return ({
           meta: { 'totalPages': totalPages },
           values: customers
        }
        );
      }
      """
    )

  """
  `customersOffset` pages through twenty three generated `Customer` objects.
  The data is supplied by a simulated REST API using offset pagination
  but is exposed using standard GraphQL pagination.

  Typically the `endpoint` argument of `@rest` would have query
  parameters that set the pagination arguments expected by the
  REST API from the field arguments `first` and `after` (offset defaults to 0 if empty),
  for example: `?limt=$first&offset=$after`.
  """
  customersOffset(first: Int!, after: String = ""): CustomerConnection
    @rest(
      # pagination sets the type of pagination the REST API uses
      # and for OFFSET requires a setter that declares
      # where the total number of records are in the JSON response.
      pagination: {
        type: OFFSET
        setters: [{ field: "total", path: "meta.records" }]
      }

      # resultroot indicates where root in the JSON response
      # for the values that will populate the nodes.
      # Note this does not affect pagination setters, they
      # are always relative to the root of the response.
      resultroot: "values[]"

      # Ecmascript (with empty endpoint) is used to mimic the response from a REST api.
      # Note ECMAScript is only used to generate a mock response with customer objects and page number metadata,
      # using @rest against a real endpoint would not typically require any ECMAScript.
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
        // A total of 23 items will be returned
        const totalItems = 23;

        // Pagination field arguments
        // Since this is OFFSET pagination
        // "after" is decoded by StepZen from the opaque string value
        // and passed into @rest as a integer offset value,
        // with the offset of the first record being zero.
        const limit = get('first');
        const offset = get('after');

        // metadata - total number of records
        const records = Math.ceil(totalItems / limit)

        // generate customers for nodes based on the limit and offset values
        const startIndex = offset+1 || 1;
        const endIndex = Math.min(startIndex + limit, totalItems+1);
        var customers = []
        for (let i = startIndex; i < endIndex; i++) {
            customers.push({
              id: i,
              name: 'name-' + i,
              email: 'user-' + i + '@example.com'
            });
        }

        // This returns a typical layout of a REST response
        // when pagination is through an offset.
        // @rest must be configured to match the REST response layout.
        //
        // pagination setters defines that the page count
        // is taken from meta.records
        //
        // resultroot corresponds to the location that contains the
        // data values. Note the REST API returns the customer objects,
        // StepZen automatically creates the connection/edges structure
        // for the values.
        return ({
           meta: { 'records': records },
           values: customers
        }
        );
      }
      """
    )
}
