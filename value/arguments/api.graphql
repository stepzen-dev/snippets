# A `@value` directive defines a value that can be applied in various contexts
# To establish a constant value within a type or query, we can utilize this directive.
# If no arguments are provided (@value) then the value is null.

enum Direction {
  NORTH
  EAST
  SOUTH
  WEST
}

type Customer {
  name: String!
  city: String!
}

# To establish a constant value for the state, utilize `@value` and provide the constant value.
extend type Customer{
  state:String @value(const:"Florida")
}


type Query {
   emptyCustomer(id: ID): Customer @value # return null value
   customer(id: ID): Customer # set the default value
   @value(
      script: {
        src: """
        Object({name:'John Doe',city:'Miami'})
        """
        language: ECMASCRIPT
      }
    )
    # To pass a constant value directly in a query and return the result
    pi:Float! @value(const:3.14159)

    # return single emu value
    direction: Direction @value(script: {src: "\"EAST\""})

   # @override with @value
   override_value(id: ID): Customer
    @override(from: "elsewhere")
    @value(script: {src: "Object({name: 'mark'})"})
}
