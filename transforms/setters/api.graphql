# This example demonstartes mapping a JSON response to the fields of the GraphQL.

type Customer {
  cId: ID
  cName: String
  cAddress: Address
}

type Address {
  city: String
  country: String
  state: String
  street: String
  postalCode: String
}

type Query {
  # ecmascript generates customer data to simulate a REST api with a JSON response.
  # To verify with a real data source (API or a database) it is required to change the `endpoint` argument on the `@rest` directive.
  # https://stepzen.com/docs/connecting-backends/how-to-connect-a-rest-service
  customerByID(id: ID!): Customer
    @rest(
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST() {
          var id = get('id')
          if (id==1)
            return ({"address":{"city":"Raleigh","country":"USA","postalCode":"54321","state":"NC","street":"101 Main St"},"id":"12345","name":"John Doe"})
          else
            return ({"address":{"city":"Hyderabad","country":"India","postalCode":"654231","state":"TS","street":"J.N.T.U Colony"},"id":"21345","name":"Siddarth A"})
      }
      """

      # mapping from JSON response values to the fields of the GraphQL result.
      setters: [
        { field: "cId", path: "id" } # cId mapped to 'id'
        { field: "cName", path: "name" } # cName mapped to 'name'
        { field: "cAddress", path: "address" } # cAddress mapped to 'address'
      ]
    )
}
