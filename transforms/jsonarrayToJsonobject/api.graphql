# Some data might be returned as an array, like coordinates: [37.7,-121.7].
# The backend system might assume that you know what they mean.
# But a subsequent call might need it to be converted to another format like {"lat":37.7,"lon":-121.7}.
# In the first query, we transform an array at the root.
# In the second query, we transform the array deeper inside using the `pathpattern` argument.
# We also show how you can always return the data as a JSON object.
# This allows you to test your jq until it matches your desired result.
# Then you can convert it to a pre-existing type.

type Coord {
  lat: Float
  lon: Float
}

type Query {
  coord: Coord
    @rest(
      # See https://stepzen.com/docs/custom-graphql-directives/directives#ecmascript for more information on using `ecmascript`.
      # We are picturing a real-life scenario in which you call a backend using the `endpoint` argument.
      # See https://stepzen.com/docs/connecting-backends/how-to-connect-a-rest-service for more information on `@rest`.
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST(s) {
          return(JSON.stringify([37.7, -121.7]))
      }
      """
      # Next, transform it using jq
      # Here the empty pathpattern means that the jq expression is applied at the root.
      transforms: [
        {
          pathpattern: []
          editor: """
          jq:{lat:.[0],lon:.[1]}
          """
        }
      ]
    )

  deepCoord: JSON
    @rest(
      # See https://stepzen.com/docs/custom-graphql-directives/directives#ecmascript for more information on using `ecmascript`.
      endpoint: "stepzen:empty"
      ecmascript: """
      function transformREST(s) {
          return(JSON.stringify({"address":{"city":"Santa Clara","location":[37.7, -121.7]}}))
      }
      """
      # and then transform it using jq
      transforms: [
        {
          pathpattern: ["address", "location"]
          editor: """
          jq:{lat:.[0],lon:.[1]}
          """
        }
      ]
    )
}
